spec:
  inputs:
    build:
      description: Build the project
      type: string
      default: nooo
      options:
        - yesss
        - nooo
    build-deploy-dev:
      description: Build and deploy in development environment
      type: string
      default: nooo
      options:
        - yesss
        - nooo
    build-deploy-prod:
      description: Build and deploy in production environment
      type: string
      default: nooo
      options:
        - yesss
        - nooo
---

stages:
  - build
  - deploy

variables:
  BUILD: $[[ inputs.build ]]
  BUILD_DEPLOY_DEV: $[[ inputs.build-deploy-dev ]]
  BUILD_DEPLOY_PROD: $[[ inputs.build-deploy-prod ]]
  ENVIRONMENT: environment
  IMAGE_NAME: $CI_REGISTRY_IMAGE

.default:
  image: antonio3a/ubuntu:24.04-dev-tools
  resource_group: $ENVIRONMENT
  retry: 1
  tags:
    - cpdi
    - devops
    - nodejs
    - angular
  after_script:
    - echo Job started by user "$GITLAB_USER_NAME" finished with status $CI_JOB_STATUS

.script-curl: &curl
  - "curl -H \"PRIVATE-TOKEN: ${DEV_GITLAB_TOKEN}\" -o docker-compose.yaml \"$CI_API_V4_URL/projects/$TEMPLATES_PROJECT_ID/repository/files/$TEMPLATES_PROJECT_ANGULAR_DOCKER_COMPOSE_TEMPLATE_PATH/raw?ref=main\""

.cache: &cache
  cache:
    key: node-modules-$CI_PROJECT_NAME
    paths:
      - node_modules

build:
  stage: build
  extends: .default
  tags:
    - build
  resource_group: $ENVIRONMENT
  <<: *cache
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        ENVIRONMENT="production"
      elif [ "$CI_COMMIT_BRANCH" = "develop" ]; then
        ENVIRONMENT="development"
      else
        ENVIRONMENT="$CI_COMMIT_BRANCH"
      fi
  script:
    - npm install --force
    - ng build --configuration $ENVIRONMENT
    - docker build --provenance false -t $IMAGE_NAME:$ENVIRONMENT .
    - docker push $IMAGE_NAME:$ENVIRONMENT
    - docker rmi $IMAGE_NAME:$ENVIRONMENT
  rules:
    - if: $BUILD == 'yesss'
    - if: $CI_COMMIT_BRANCH == 'develop' && $BUILD_DEPLOY_DEV == 'yesss'
    - if: $CI_COMMIT_BRANCH == 'main' && $BUILD_DEPLOY_PROD == 'yesss'

deploy-dev:
  stage: deploy
  extends: .default
  tags:
    - deploy
    - development
  resource_group: $ENVIRONMENT
  environment:
    name: $ENVIRONMENT
    url: https://$CI_PROJECT_NAME.cpdi.dev
  variables:
    ENVIRONMENT: "development"
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$ENVIRONMENT
    PROJECT_NAME: $CI_PROJECT_NAME
  before_script:
    - *curl
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker compose -f docker-compose.yaml pull
    - docker compose -f docker-compose.yaml down --remove-orphans
    - docker compose -f docker-compose.yaml up -d
    - docker image prune -f
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $BUILD_DEPLOY_DEV == 'yesss'

deploy-prod:
  stage: deploy
  extends: .default
  tags:
    - deploy
    - production
  resource_group: $ENVIRONMENT
  environment:
    name: $ENVIRONMENT
    url: https://$CI_PROJECT_NAME.sinse.org
  variables:
    ENVIRONMENT: "production"
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$ENVIRONMENT
    SSH_PORT: $SSE_APPS_VM_SSH_PORT
    SSH_USER_HOST: $GB_USERNAME@$SSE_APPS_VM_IP
    SSH_CONFIG: -i $GB_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no
  before_script:
    - *curl
    - chmod og= $GB_SSH_PRIVATE_KEY
    - echo $CI_REGISTRY_PASSWORD | ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo -e PROJECT_NAME="$CI_PROJECT_NAME""\n"IMAGE_NAME="$IMAGE_NAME" > .env
    - export TEMP_DIR=$(ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST "mktemp -d /tmp/XXXXXXXXXXXXXXXXXXXX")
    - scp $SSH_CONFIG -P $SSH_PORT .env docker-compose.yaml $SSH_USER_HOST:$TEMP_DIR/
    - ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST docker compose -f $TEMP_DIR/docker-compose.yaml pull
    - ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST docker compose -f $TEMP_DIR/docker-compose.yaml -p $CI_PROJECT_NAME down --remove-orphans
    - ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST docker compose -f $TEMP_DIR/docker-compose.yaml -p $CI_PROJECT_NAME up -d
    - ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST docker image prune -f
    - ssh $SSH_CONFIG -p $SSH_PORT $SSH_USER_HOST rm -rf $TEMP_DIR
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $BUILD_DEPLOY_PROD == 'yesss'
